name: Full Security and Build Pipeline

on:
  push:
  workflow_dispatch:

jobs:
  gitleaks-scan:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Notify Gitleaks Scan Completed
        run: echo "Gitleaks scan completed successfully."

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ vars.MAIN_FILE }}

      - name: Build the project
        run: dotnet build ${{ vars.MAIN_FILE }} --no-restore --configuration Release

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: ${{ github.repository }}
          path: '.'
          format: 'HTML'
          out: '.'
          args: '--enableRetired'

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report.zip
          path: ${{ github.workspace }}/dependency-check-report.html

      - name: Notify Dependency Check Completed
        run: echo "Dependency Check completed successfully."

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: windows-latest
    needs: dependency-check
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Scanner (if missing)
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo '## Add dotnet tools to PATH'
          $env:PATH += ';C:\Users\runneradmin\.dotnet\tools'

      - name: Build and analyze with SonarQube
        shell: powershell
        run: |
          $repo_name = "${{ github.repository }}" -split "/" | Select-Object -Last 1
          dotnet-sonarscanner begin /k:"$repo_name" /d:sonar.scanner.scanAll=false /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build ${{ vars.MAIN_FILE }}
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Notify SonarQube Analysis Completed
        run: echo "SonarQube analysis completed successfully."

  trivy-filesystem-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: /root/.cache/trivy
          key: ${{ runner.os }}-trivy-db

      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scanners: 'vuln,misconfig,secret'
          ignore-unfixed: true
          format: 'table'
          output: 'trivy-filesystem-scan.table'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'

      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-filesystem-scan
          path: 'trivy-filesystem-scan.table'

      - name: Notify Trivy Filesystem Scan Completed
        run: echo "Trivy filesystem scan completed successfully."

  docker-build-scan-and-push:
    name: Docker Build, Scan, and Push
    runs-on: ubuntu-latest
    needs: trivy-filesystem-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log into DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        id: build_image
        run: |
          repo_name=$(basename "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          image_tag="${repo_name}:${{ github.sha }}"
          safe_image_tag="$(echo "$image_tag" | tr ':' '-')"
          echo "image_tag=$image_tag" >> $GITHUB_ENV
          echo "safe_image_tag=$safe_image_tag" >> $GITHUB_ENV
          docker build -t "${{ secrets.DOCKER_USERNAME }}/$image_tag" .

      - name: Trivy Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKER_USERNAME }}/${{ env.image_tag }}"
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          ignore-unfixed: true
          output: 'trivy-image-scan-${{ env.safe_image_tag }}.table'

      - name: Push Docker Image to DockerHub
        run: docker push "${{ secrets.DOCKER_USERNAME }}/${{ env.image_tag }}"

      - name: Notify Docker Image Scan and Push Completed
        run: |
          echo "Docker image built, scanned, and pushed successfully with tag: ${{ secrets.DOCKER_USERNAME }}/${{ env.image_tag }}."
